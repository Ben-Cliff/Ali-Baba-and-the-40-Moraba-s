<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>morabHalfDone</name></assembly>
<members>
<member name="T:DataSets.Mill">
 <summary>
 Data structure that holds sets of 3 positions to check each mill available
 </summary>
</member>
<member name="T:DataSets.Position">
 <summary>
 Positions we use for our data sets
 </summary>
</member>
<member name="M:DataSets.mrbaToFlat(System.String)">
 <summary>
 converts from morabaraba user co ordinates to flat co ordinates
 </summary>
 <param name="a">String version of the input</param>
</member>
<member name="P:DataSets.mills">
 <summary>
 All the possible mills available
 </summary>
</member>
<member name="P:DataSets.flatboard">
 <summary>
 flat co ordinate system used for operation. See ReadMe
 </summary>
</member>
<member name="M:Drawing.writeError(System.String)">
 <summary>
 Writes magenta text to the player to let them know that something was wrong
 </summary>
 <param name="msg">The message to tell them</param>
</member>
<member name="M:Drawing.drawBoard(Microsoft.FSharp.Collections.FSharpList{System.Int32})">
 <summary>
 Convert the "int list" we keep the board in to a coloured grid on the console window
 </summary>
 <param name="board">The tile set we are using</param>
</member>
<member name="M:Drawing.whatBoardDraws(System.Int32)">
 <summary>
 Conversion from 0,1,2 to a blank space or the character we want to show for the player
  - as a side note, this should also be adjusted in consColorWrite for use if we adjust these
 </summary>
 <param name="item"></param>
</member>
<member name="M:Drawing.consColorWrite(System.String)">
 <summary>
 Write a full string with colours converted for the game (so we can have red/blue/gray/white/etc)
 </summary>
 <param name="msg">The string we need to convert and write on console</param>
</member>
<member name="M:Drawing.getIcon(System.Int32)">
 <summary>
 Get a player's icon
 </summary>
 <param name="plyr">The player's number</param>
</member>
<member name="M:Morabaraba.move(System.Int32,System.Int32,Microsoft.FSharp.Collections.FSharpList{System.Int32},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{DataSets.Mill},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{System.Int32},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{System.Int32},Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Boolean}}}})">
 <summary>
 In progress version allows the 24 placement moves (? Ernest unsure)
 </summary>
 <param name="movesleft">The number of placements left (? Ernest unsure : we might change this slightly)</param>
 <param name="mills">The list of mills we can search through</param>
 <param name="player">The current player</param>
 <param name="board">The board we are using</param>
 <param name="ismill">The function we use to work out if there is a mill (? Ernest unsure : we can move this)</param>
</member>
<member name="M:Morabaraba.place(System.Int32,System.Int32,Microsoft.FSharp.Collections.FSharpList{System.Int32})">
 <summary>
 Placing a cow
 </summary>
 <param name="mills">The built up mills we have in DataSets</param>
 <param name="player">The current player</param>
 <param name="cowsleft">The number of cows we have left in the game to place (? Ernest unsure)</param>
 <param name="board">The board we are using</param>
 <param name="ismill">The function we use to work out if there is a mill (? Ernest unsure : we can move this)</param>
</member>
<member name="M:Morabaraba.shoot(System.Int32,System.Int32,Microsoft.FSharp.Collections.FSharpList{System.Int32},System.Int32)">
 <summary>
 When you shoot a cow, this is the function called
 </summary>
 <param name="point">This is the point</param>
 <param name="victim">The victim you are shooting</param>
 <param name="board">The board we are using</param>
 <param name="player">The current player</param>
</member>
<member name="M:Morabaraba.otherplayer(System.Int32)">
 <summary>
 Returns the opposit player
 </summary>
 <param name="player"></param>
</member>
<member name="M:Morabaraba.interaction(System.Int32,Microsoft.FSharp.Collections.FSharpList{System.Int32},System.String,System.Int32)">
 <summary>
 The main game loop, more is eplained inside
 </summary>
 <param name="player">The current player</param>
 <param name="board">The board we are using</param>
 <param name="sentence">The sentence which describes the current play that's running</param>
 <param name="expect">What we are expecting</param>
</member>
<member name="M:Morabaraba.inAct(Microsoft.FSharp.Collections.FSharpList{System.Int32},Microsoft.FSharp.Collections.FSharpList{System.Int32},System.Int32)">
 <summary>
 Work out what is in a position on the board and see if it is what we expect
 </summary>
 <param name="board">The board we are using</param>
 <param name="coords">The co-ordinates we are using</param>
 <param name="expect">What we are expecting</param>
</member>
<member name="M:Morabaraba.ismill(Microsoft.FSharp.Collections.FSharpList{System.Int32},Microsoft.FSharp.Collections.FSharpList{System.Int32},System.Int32)">
 <summary>
 Works out if we have a mill using the list of mills
 </summary>
 <param name="mills">The list of mills we can search through</param>
 <param name="board">The board we are using</param>
 <param name="spot">The co-ordinates we are using</param>
 <param name="player">The current player</param>
</member>
<member name="M:Morabaraba.updateboard(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{System.Int32},Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32}}}}},System.Int32,System.Int32,Microsoft.FSharp.Collections.FSharpList{System.Int32})">
 <summary>
 Update the board at a specific coordinate
 </summary>
 <param name="f">(? Ernest unsure)</param>
 <param name="player">Which player is using this (? Ernest unsure)</param>
 <param name="coord">The co-ordinates we are using</param>
 <param name="board">The board we are using</param>
</member>
<member name="M:Morabaraba.removecow(System.Int32,System.Int32,Microsoft.FSharp.Collections.FSharpList{System.Int32},System.Int32,System.Int32)">
 <summary>
 Removing a cow from a place on the board
 </summary>
 <param name="player">Which player is using this (? Ernest unsure)</param>
 <param name="coord">The co-ordinates we are using</param>
 <param name="board">The board we are using</param>
 <param name="index">The index of the board element</param>
 <param name="valu">(? Ernest unsure)</param>
</member>
<member name="M:Morabaraba.insertcow(System.Int32,System.Int32,Microsoft.FSharp.Collections.FSharpList{System.Int32},System.Int32,System.Int32)">
 <summary>
 this function is passed into updateboard (custom List.mapi), operates on each element
 </summary>
 <param name="player">Which player is using this (? Ernest unsure)</param>
 <param name="coord">The co-ordinates we are using</param>
 <param name="board">The board we are using</param>
 <param name="index">The index of the board element</param>
 <param name="valu">(? Ernest unsure)</param>
</member>
</members>
</doc>
